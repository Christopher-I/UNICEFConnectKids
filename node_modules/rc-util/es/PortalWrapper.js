import _typeof from 'babel-runtime/helpers/typeof';
import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { polyfill } from 'react-lifecycles-compat';
import ContainerRender from './ContainerRender';
import Portal from './Portal';

var openCount = 0;
var windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);

var IS_REACT_16 = 'createPortal' in ReactDOM;

var PortalWrapper = function (_React$Component) {
  _inherits(PortalWrapper, _React$Component);

  function PortalWrapper(props) {
    _classCallCheck(this, PortalWrapper);

    var _this = _possibleConstructorReturn(this, (PortalWrapper.__proto__ || Object.getPrototypeOf(PortalWrapper)).call(this, props));

    _initialiseProps.call(_this);

    var visible = props.visible;

    openCount = visible ? openCount + 1 : openCount;
    _this.state = {
      _self: _this
    };
    return _this;
  }

  _createClass(PortalWrapper, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.setWrapperClassName();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var visible = this.props.visible;
      // 离开时不会 render， 导到离开时数值不变，改用 func 。。

      openCount = visible && openCount ? openCount - 1 : openCount;
      this.removeCurrentContainer(visible);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          forceRender = _props.forceRender,
          visible = _props.visible;

      var portal = null;
      var childProps = {
        getOpenCount: function getOpenCount() {
          return openCount;
        },
        getContainer: this.getContainer
      };
      // suppport react15
      if (!IS_REACT_16) {
        return React.createElement(
          ContainerRender,
          {
            parent: this,
            visible: visible,
            autoDestroy: false,
            getComponent: function getComponent() {
              var extra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              return children(_extends({}, extra, childProps, {
                ref: _this2.savePortal
              }));
            },
            getContainer: this.getContainer,
            forceRender: forceRender
          },
          function (_ref) {
            var renderComponent = _ref.renderComponent,
                removeContainer = _ref.removeContainer;

            _this2.renderComponent = renderComponent;
            _this2.removeContainer = removeContainer;
            return null;
          }
        );
      }
      if (forceRender || visible || this._component) {
        portal = React.createElement(
          Portal,
          { getContainer: this.getContainer, ref: this.savePortal },
          children(childProps)
        );
      }
      return portal;
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(props, _ref2) {
      var prevProps = _ref2.prevProps,
          _self = _ref2._self;
      var visible = props.visible,
          getContainer = props.getContainer;

      if (prevProps) {
        var prevVisible = prevProps.visible,
            prevGetContainer = prevProps.getContainer;

        if (visible !== prevVisible) {
          openCount = visible && !prevVisible ? openCount + 1 : openCount - 1;
        }
        if (getContainer !== prevGetContainer) {
          _self.removeCurrentContainer(false);
        }
      }
      return {
        prevProps: props
      };
    }
  }]);

  return PortalWrapper;
}(React.Component);

PortalWrapper.propTypes = {
  wrapperClassName: PropTypes.string,
  forceRender: PropTypes.bool,
  getContainer: PropTypes.any,
  children: PropTypes.func,
  visible: PropTypes.bool
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.getParent = function () {
    var getContainer = _this3.props.getContainer;

    if (getContainer) {
      if (typeof getContainer === 'string') {
        return document.querySelectorAll(getContainer)[0];
      }
      if (typeof getContainer === 'function') {
        return getContainer();
      }
      if ((typeof getContainer === 'undefined' ? 'undefined' : _typeof(getContainer)) === 'object' && getContainer instanceof window.HTMLElement) {
        return getContainer;
      }
    }
    return document.body;
  };

  this.getContainer = function () {
    if (windowIsUndefined) {
      return null;
    }
    if (!_this3.container) {
      _this3.container = document.createElement('div');
      var parent = _this3.getParent();
      parent.appendChild(_this3.container);
    }
    _this3.setWrapperClassName();
    return _this3.container;
  };

  this.setWrapperClassName = function () {
    var wrapperClassName = _this3.props.wrapperClassName;

    if (_this3.container && wrapperClassName && wrapperClassName !== _this3.container.className) {
      _this3.container.className = wrapperClassName;
    }
  };

  this.savePortal = function (c) {
    _this3._component = c;
  };

  this.removeCurrentContainer = function (visible) {
    _this3.container = null;
    _this3._component = null;
    if (!IS_REACT_16) {
      if (visible) {
        _this3.renderComponent({
          afterClose: _this3.removeContainer,
          onClose: function onClose() {},

          visible: false
        });
      } else {
        _this3.removeContainer();
      }
    }
  };
};

export default polyfill(PortalWrapper);